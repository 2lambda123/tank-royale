import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.31'
    id 'maven-publish'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.28.0'
}

group = 'dev.robocode.tankroyale'
version = '0.6.16'
description = 'UI Desktop application for running Robocode Tank Royale'

ext {
    server_version = '0.7.18'
    bootstrap_version = '0.6.10'
}

repositories {
    jcenter()
    mavenLocal()
}

idea {
    module {
        outputDir = file("$buildDir/classes/kotlin")
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "9"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "9"
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.31'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.31'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0'

    implementation 'org.java-websocket:Java-WebSocket:1.5.1'

    implementation 'com.miglayout:miglayout-swing:5.2'

    runtime ("dev.robocode.tankroyale:robocode-tankroyale-server:${server_version}") {
        exclude group: 'ch.qos.logback'
    }
    runtime "dev.robocode.tankroyale:robocode-tankroyale-bootstrap:${bootstrap_version}"
}

task copyServerJar(type: Copy) {
    from configurations.runtime
    into "$idea.module.outputDir"
    include("robocode-tankroyale-server-*.jar")
    rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
}

task copyBootstrapJar(type: Copy) {
    from configurations.runtime
    into "$idea.module.outputDir"
    include("robocode-tankroyale-bootstrap-*.jar")
    rename '(.*)-[0-9]+\\..*.jar', '$1.jar'
}

build.dependsOn copyServerJar
build.dependsOn copyBootstrapJar

// Modify versions.txt using replacement of @version@ token
processResources {
    with copySpec {
        from 'src/main/resources'
        include 'version.txt'
        filter(ReplaceTokens, tokens: [version: version])
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'dev.robocode.tankroyale.gui.ui.MainWindowKt'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'robocode-tankroyale-gui'
            artifact fatJar
        }
    }
}