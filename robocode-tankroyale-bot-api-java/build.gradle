plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.38.0' // versions
}
group = 'dev.robocode.tankroyale'
version = '0.8.9'
description = 'Robocode Tank Royale Bot API for Java'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

repositories {
    mavenLocal()
    mavenCentral();
}

dependencies {
    implementation 'dev.robocode.tankroyale:robocode-tankroyale-schema:0.7.0'
    implementation 'com.neovisionaries:nv-i18n:1.28'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.danilopianini:gson-extras:0.2.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0-M1'
    testImplementation 'org.assertj:assertj-core:3.19.0'
}

test {
    useJUnitPlatform()
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    options.memberLevel = JavadocMemberLevel.PUBLIC
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output // avoid javadoc error
    exclude "**/dev/robocode/tankroyale/botapi/events/**",
            "**/dev/robocode/tankroyale/botapi/internal/**",
            "**/dev/robocode/tankroyale/botapi/mapper/**",
            "**/dev/robocode/tankroyale/bot/**"
}

task fatJar(type: Jar) {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'robocode-tankroyale-bot-api-java'
            artifact fatJar
        }
    }
}